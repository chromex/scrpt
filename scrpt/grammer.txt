all_characters = ? all visible ansii characters ?;
letter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" 
      | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" 
      | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A"
      | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
      | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S"
      | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";
terminal = '"', { all characters }, '"';

digit_excluding_zero = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
digit = "0" | digit_excluding_zero;
natural_number = digit_excluding_zero, { digit };
number = "0" | [ "-" ], natural_number, [ ".", digit, { digit } ] | [ "-" ], "0", ".", digit, { digit };

bool = "true" | "false";

constant = terminal | number | bool | list | dict;

ident = ( letter | "_" ), { letter | digit | "_" };

key_value_pair = terminal, ":", expression;
dict = "{", [ key_value_pair, { ",", key_value_pair }, [ "," ] ], "}";
list = "[", [ expression, { ",", expression }, [ "," ] ], "]";

index = "[", [ expression ], [ ":", [ expression ] ], "]";
call = "(", [ expression, { ",", expression } ], ")";
dot_expand = ".", ident;

block = "{", { statement }, "}";

do_loop = "do", block, "while", "(", expression, ")", ";"
while_loop = "while", "(", expression, ")", statement;
for_loop = "for", "(", expression, ";", expression, ";", expression, ")", statement;
if = "if", "(", expression, ")", statement, { "elif", "(", expression, ")", statement }, [ "else", statement ];
case = ( "case", constant | "default" ), ":", { statement };
switch = "switch", "(", expression, ")", "{", { case }, "}";
return = "return", [ expression ], ";";
break = "break", ";";
continue = "continue", ";";

parens = "(", expression, ")";

ex_term = ident | constant | parens;
ex_postfix = ex_term, { ( index | call | dot_expand | "++" | "--" ) } | ex_term;
ex_prefix = ( "!" | "++" | "--" | "-" ), ex_prefix | ex7;
ex_mul = ex_prefix, ( "*" | "/" | "%" ), ex_mul | ex_prefix;
ex_add = ex_mul, ( "+" | "-" ), ex_add | ex_mul;
ex_compare = ex_add, ( "<" | ">" | "<=" | ">=" ), ex_compare | ex_add;
ex_concat = ex_compare, "#", ex_concat | ex_compare;
ex_equals = ex_concat, ( "==" | "!=" ), ex_equals | ex_concat;
ex_and = ex_equals, "&&", ex_and | ex_equals;
ex_or = ex_and, "||", ex_or | ex_and;
expression = ex_or, ( "=" | "*=" | "/=" | "+=" | "-=" | "%=" | "#=" ), expression | ex_or;

statement = [ expression ], ";" | block | do_loop | while_loop | for_loop | if | switch | return | break;

func = "func", ident, "(", [ ident, { ",", ident } ], ")", block;
program = { func };
